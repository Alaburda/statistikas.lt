{"title":"Kaip koduoti duomenis?","markdown":{"yaml":{"title":"Kaip koduoti duomenis?","draft":true},"headingText":"Kaip perkoduoti stulpelių pavadinimus?","containsRefs":false,"markdown":"\n\nDažnas sulaukiu klausimo, kaip saugoti ir koduoti duomenis. Jeigu dirbate su SPSS, tai nėra problema - SPSS leidžia perkoduoti kintamuosius, jog duomenys liktų nepakoreguoti, bet grafikuose ar lentelėse būtų pavaizduoti teisingai. Bet ką daryti, jeigu dirbame su R?\n\n\nNesvarbu, kur dirbate, geriausia stulpelių pavadinimus saugoti taip:\n\n* Kiekvienas stulpelis turi turėti pavadinimą\n* Žodžiai pavadinime turi būti atskirti nuosekliai (stulpelio_pavadinimas, StulpelioPavadinimas, stulpelio.pavadinimas ir pan.)\n* Stulpelių pavadinimuose vengti lietuviškų rašmenų, skliaustų bei kablelių.\n\nKai dirbu su duomenimis, praktiškai visada gautus duomenis konvertuoju su `clean_names` funkcija iš `janitor` paketo.\n\n::: panel-tabset \n\n### 💩 Prieš:\n\n```{r}\n\nhead(iris)\n\n```\n\n### 😍 Po `clean_names`:\n\n```{r}\n\nhead(janitor::clean_names(iris))\n\n```\n\n:::\n\nStulpelių pavadinimų standartizavimas padeda greičiau dirbti, bet tai neišsprendžia problemos, jog lentelės ir grafikai su tokiais pavadinimais nėra tinkami publikavimui:\n\n```{r, echo = FALSE, warning = FALSE, message = FALSE}\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\niris %>% \n  janitor::clean_names() %>% \n  ggplot(aes(x = species, y = sepal_length)) + geom_boxplot() +\n  labs(title = \"Niekas nenori tokių ašių pavadinimų\")\n\n```\n\nMano mėgstamiausias būdas pervadinti pavadinimus yra su žodynu kiekvienam stulpelio pavadinimui:\n\n```{r}\n\niris_labels <- list(Sepal.Length = \"Taurėlapio ilgis, cm\",\n                    Sepal.Width = \"Taurėlapio plotis, cm\",\n                    Petal.Length = \"Vainiklapio ilgis, cm\",\n                    Petal.Width = \"Vainiklapio plotis, cm\",\n                    Species = \"Iriso rūšis\")\n\n```\n\nSąrašą galima pernaudoti ir grafikuose, ir lentelėse. Su `ggplot2` sąrašą galima panaudoti taip:\n\n::: panel-tabset \n\n### Prieš:\n\n```{r, warning = F, message = F}\n\n\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot()\n\n```\n\n### Po:\n\n```{r}\n\n\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot() +\n  labs(x = iris_labels$Species,\n       y = iris_labels$Sepal.Length)\n\n```\n\n:::\n\n# Duomenų kodavimas stulpelyje\n\nDuomenis viduje stulpelio galima perkoduoti trimis būdais:\n\n* `case_when()` funkcija\n* `case_match()` funkcija\n* `recode()` funkcija\n* Naudoti lookup lenteles\n\nPraeityje esu naudojęs ir `left_join()` prisijungti kodatorius bei esu naudojęs `recode()` bei `ifelse()` funkcijas, bet šie trys metodai yra patogiausi.  \n\n## case_when()\n\n`case_when()` funkcija be galo patogi, jeigu išmanote SQL arba jeigu reikia perkoduoti duomenis remiantis keliais stulpeliais. Pavyzdžiui:\n\n```{r}\n\nlibrary(palmerpenguins)\n\npenguins %>% \n  mutate(species = case_when(species == \"Adelie\" ~ \"Adelės\",\n                             species == \"Chinstrap\" ~ \"Antarktinis\",\n                             species == \"Gentoo\" ~ \"Papuasinis\"))\n\n```\n\n## case_match()\n\n`case_when()` atveju reikia rašyti species stulpelį tris kartus. `case_match()` supaprastina sintaksę su sąlyga, jog dirbame su *vienu* stulpeliu[^1].\n\n[^1]: https://dplyr.tidyverse.org/reference/case_match.html\n\n```{r}\n\n\npenguins %>% \n  mutate(species = case_match(species,\n                              \"Adelie\" ~ \"Adelės\",\n                              \"Chinstrap\" ~ \"Antarktinis\",\n                              \"Gentoo\" ~ \"Papuasinis\"))\n\n```\n\n\n## Lookup lentelės\n\nLookup lenteles neseniai atradau knygoje [Advanced R](https://adv-r.hadley.nz/subsetting.html#lookup-tables), bet man šis metodas LABAI patinka!\n\n```{r}\n\nlookup_penguins <- c(Adelie = \"Adelės\",\n                     Chinstrap = \"Antarktinis\",\n                     Gentoo = \"Papuasinis\")\n\npenguins %>% \n  mutate(species = lookup_penguins[species])\n\n```\n\nJeigu kada tvarkėte duomenis, turbūt žinote, jog tvarkymas gali pasidaryti labai klampus - šis būdas iškelia visą kodavimą į atskirą vietą. Toks būdas taip pat nepriverčia perkoduoti kintamųjų čia ir dabar. Pavyzdžiui, tai galima padaryti viduje `ggplot` grafiko:\n\n```{r}\n\nggplot(penguins, aes(x = lookup_penguins[species], y = bill_length_mm)) + geom_boxplot()\n\n\n```\n\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"reference-location":"margin","highlight-style":"monokai","output-file":"kaip-koduoti-duomenis.html"},"language":{"code-summary":"Rodyti kodą"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","theme":["../../html/statistikas.scss"],"anchor-sections":true,"fig-cap-location":"margin","footnotes-hover":true,"title-block-banner":true,"title":"Kaip koduoti duomenis?","draft":true},"extensions":{"book":{"multiFile":true}}}}}