---
title: "Kaip koduoti duomenis?"
draft: true
---

Dažnas sulaukiu klausimo, kaip saugoti ir koduoti duomenis. Jeigu dirbate su SPSS, tai nėra problema - SPSS leidžia perkoduoti kintamuosius, jog duomenys liktų nepakoreguoti, bet grafikuose ar lentelėse būtų pavaizduoti teisingai. Bet ką daryti, jeigu dirbame su R?

# Kaip perkoduoti stulpelių pavadinimus?

Nesvarbu, kur dirbate, geriausia stulpelių pavadinimus saugoti taip:

* Kiekvienas stulpelis turi turėti pavadinimą
* Žodžiai pavadinime turi būti atskirti nuosekliai (stulpelio_pavadinimas, StulpelioPavadinimas, stulpelio.pavadinimas ir pan.)
* Stulpelių pavadinimuose vengti lietuviškų rašmenų, skliaustų bei kablelių.

Kai dirbu su duomenimis, praktiškai visada gautus duomenis konvertuoju su `clean_names` funkcija iš `janitor` paketo.

::: panel-tabset 

### 💩 Prieš:

```{r}

head(iris)

```

### 😍 Po `clean_names`:

```{r}

head(janitor::clean_names(iris))

```

:::

Stulpelių pavadinimų standartizavimas padeda greičiau dirbti, bet tai neišsprendžia problemos, jog lentelės ir grafikai su tokiais pavadinimais nėra tinkami publikavimui:

```{r, echo = FALSE, warning = FALSE, message = FALSE}

library(ggplot2)
library(dplyr)

iris %>% 
  janitor::clean_names() %>% 
  ggplot(aes(x = species, y = sepal_length)) + geom_boxplot() +
  labs(title = "Niekas nenori tokių ašių pavadinimų")

```

Mano mėgstamiausias būdas pervadinti pavadinimus yra su žodynu kiekvienam stulpelio pavadinimui:

```{r}

iris_labels <- list(Sepal.Length = "Taurėlapio ilgis, cm",
                    Sepal.Width = "Taurėlapio plotis, cm",
                    Petal.Length = "Vainiklapio ilgis, cm",
                    Petal.Width = "Vainiklapio plotis, cm",
                    Species = "Iriso rūšis")

```

Sąrašą galima pernaudoti ir grafikuose, ir lentelėse. Su `ggplot2` sąrašą galima panaudoti taip:

::: panel-tabset 

### Prieš:

```{r, warning = F, message = F}


iris %>% 
  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot()

```

### Po:

```{r}


iris %>% 
  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot() +
  labs(x = iris_labels$Species,
       y = iris_labels$Sepal.Length)

```

:::

# Duomenų kodavimas stulpelyje

Duomenis viduje stulpelio galima perkoduoti trimis būdais:

* `case_when()` funkcija
* `case_match()` funkcija
* `recode()` funkcija
* Naudoti lookup lenteles

Praeityje esu naudojęs ir `left_join()` prisijungti kodatorius bei esu naudojęs `recode()` bei `ifelse()` funkcijas, bet šie trys metodai yra patogiausi.  

## case_when()

`case_when()` funkcija be galo patogi, jeigu išmanote SQL arba jeigu reikia perkoduoti duomenis remiantis keliais stulpeliais. Pavyzdžiui:

```{r}

library(palmerpenguins)

penguins %>% 
  mutate(species = case_when(species == "Adelie" ~ "Adelės",
                             species == "Chinstrap" ~ "Antarktinis",
                             species == "Gentoo" ~ "Papuasinis"))

```

## case_match()

`case_when()` atveju reikia rašyti species stulpelį tris kartus. `case_match()` supaprastina sintaksę su sąlyga, jog dirbame su *vienu* stulpeliu[^1].

[^1]: https://dplyr.tidyverse.org/reference/case_match.html

```{r}


penguins %>% 
  mutate(species = case_match(species,
                              "Adelie" ~ "Adelės",
                              "Chinstrap" ~ "Antarktinis",
                              "Gentoo" ~ "Papuasinis"))

```


## Lookup lentelės

Lookup lenteles neseniai atradau knygoje [Advanced R](https://adv-r.hadley.nz/subsetting.html#lookup-tables), bet man šis metodas LABAI patinka!

```{r}

lookup_penguins <- c(Adelie = "Adelės",
                     Chinstrap = "Antarktinis",
                     Gentoo = "Papuasinis")

penguins %>% 
  mutate(species = lookup_penguins[species])

```

Jeigu kada tvarkėte duomenis, turbūt žinote, jog tvarkymas gali pasidaryti labai klampus - šis būdas iškelia visą kodavimą į atskirą vietą. Toks būdas taip pat nepriverčia perkoduoti kintamųjų čia ir dabar. Pavyzdžiui, tai galima padaryti viduje `ggplot` grafiko:

```{r}

ggplot(penguins, aes(x = lookup_penguins[species], y = bill_length_mm)) + geom_boxplot()


```




