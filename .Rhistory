install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
stuff <- data.frame(lytis = c(rep("mot",5),rep("vyr",5)),
rukyti = c(rep("taip",2),rep("ne",3),rep("taip",2),rep("ne",3)))
stuf
stuff
stuff <- data.frame(lytis = c(rep("Moteris",5),rep("Vyras",5)),
rukyti = c(rep("Taip",2),rep("Ne",3),rep("Taip",2),rep("Ne",3)))
chisq.test(table(stuff))
stuff <- data.frame(lytis = c(rep("Moteris",5),rep("Vyras",5)),
rukyti = c(rep("Taip",1),rep("Ne",4),rep("Taip",2),rep("Ne",3)))
chisq.test(table(stuff))
stuff <- data.frame(lytis = c(rep("Moteris",8),rep("Vyras",8)),
rukyti = c(rep("Taip",1),rep("Ne",7),rep("Taip",5),rep("Ne",3)))
chisq.test(table(stuff))
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram() + labs(title = "Nėra neįprastų reikšmių")
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram() + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 2) + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 15) + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 150) + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 0.2) + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
ggplot(iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 0.1) + labs(title = "Nėra neįprastų reikšmių") + facet_wrap(~Species)
iris %>% writexl::write_xlsx("iris.xlsx")
library(tidyverse)
iris %>% writexl::write_xlsx("iris.xlsx")
install.packages("writexl")
iris %>% writexl::write_xlsx("iris.xlsx")
names(iris)
iris %>%
lm(data = ., Sepal.Length ~ Species) %>%
Anova(type = 3) %>%
tidy()
library(broom)
iris %>%
lm(data = ., Sepal.Length ~ Species) %>%
Anova(type = 3) %>%
tidy()
??Anova
library(car)
iris %>%
lm(data = ., Sepal.Length ~ Species) %>%
Anova(type = 3) %>%
tidy()
library(shiny); runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
runApp('anova_shiny.R')
names(iris)
iris %>% count(Species)
t.test(data = iris, Sepal.Length ~ Species, subset = c("setosa","versicolor"))
?t.test
t.test(data = iris, Sepal.Length ~ Species, subset = Species %in% c("setosa","versicolor"))
rs <- t.test(data = iris, Sepal.Length ~ Species, subset = Species %in% c("setosa","versicolor"))
plot(rs)
rs
install.packages("performance")
install.packages("easystats")
install.packages("easystats")
install.packages("easystats")
library(performance)
check_model(rs)
library(ggplot2)
qplot(sample = iris) +
stat_qq_line(colour = "dodgerblue") +
labs(x = "Theoretical distribution",
y = "Sample distribution",
title = "QQ Plot for Residual Error")
ggplot(iris, aes(sample = Sepal.Length))
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line()
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line() + facet_wrap(~Species)
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line() + facet_wrap(~Species) + labs(title = "3 vilkdalgių rūšių taurėlapių ilgio QQ grafikas", subtitle = "`iris` duomenų rinkinys")
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line() + facet_wrap(~Species) + labs(title = "3 vilkdalgių rūšių taurėlapių ilgio QQ grafikas", subtitle = "*iris* duomenų rinkinys")
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line() + facet_wrap(~Species) + labs(title = "3 vilkdalgių rūšių taurėlapių ilgio QQ grafikas", subtitle = "iris duomenų rinkinys; kuo arčiau vidurinės ")
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line(color = "red") + facet_wrap(~Species) + labs(title = "3 vilkdalgių rūšių taurėlapių ilgio QQ grafikas", subtitle = "iris duomenų rinkinys; kuo arčiau linijos centre yra ")
t.test(data = iris, Sepal.Length ~ Species, subset = Species %in% c("setosa","versicolor"))
ggplot(iris, aes(sample = Sepal.Length)) + stat_qq() + stat_qq_line(color = "red") + facet_wrap(~Species) + labs(title = "3 vilkdalgių rūšių taurėlapių ilgio QQ grafikas", subtitle = "iris duomenų rinkinys; kuo arčiau linijos centre yra taškai, tuo geriau.")
p1 + p2
library(patchwork)
tmp_data <- data.frame(sample_norm = rnorm(100))
p1 <- ggplot(tmp_data, aes(sample = sample_norm)) + stat_qq() + stat_qq_line(color = "red")
p2 <- ggplot(tmp_data, aes(x = sample_norm)) + geom_histogram() + stat_function(fun = dnorm, args = list(mean = mean(tmp_data$sample_norm), sd = sd(tmp_data$sample_norm)))
p1 + p2
p2 <- ggplot(tmp_data, aes(x = sample_norm)) + geom_histogram() + stat_function(
fun = dnorm,
args = with(tmp_data, c(mean = mean(sample_norm), sd = sd(sample_norm)))
)
p1 + p2
p2 <- ggplot(tmp_data, aes(x = sample_norm)) + geom_histogram() + stat_function(
fun = dnorm, color = "red",
args = with(tmp_data, c(mean = mean(sample_norm), sd = sd(sample_norm)))
)
p1 + p2
p2 <- ggplot(tmp_data, aes(x = sample_norm)) + geom_histogram(aes = ..density..) + stat_function(
fun = dnorm, color = "red",
args = with(tmp_data, c(mean = mean(sample_norm), sd = sd(sample_norm)))
)
p2 <- ggplot(tmp_data, aes(x = sample_norm)) + geom_histogram(aes(y = ..density..)) + stat_function(
fun = dnorm, color = "red",
args = with(tmp_data, c(mean = mean(sample_norm), sd = sd(sample_norm)))
)
p1 + p2
t.test(data = iris, Sepal.Length ~ Species, subset = Species %in% c("setosa","versicolor"))
install.packages("patchwork")
library(patchwork)
install.packages("rlang")
library(broom)
library(car)
library(dplyr)
library(ggplot2)
my.anova <- aov(data = iris, Sepal.Length ~ Species)
#my.anova <- iris %>%
#  lm(data = ., Sepal.Length ~ Species) %>%
#  Anova(type = 3)
TukeyHSD(my.anova)
?wilcox.test
cor.test(iris$Sepal.Length, iris$Sepal.Width, method = "spearman")
cor.test(iris$Sepal.Length, iris$Sepal.Width, method = "spearman")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() + geom_smooth(method = "lm")
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point() + geom_smooth(method = "lm")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, fill = Species)) + geom_point() + geom_smooth(method = "lm") + labs(title = "Koreliacija tarp taurėlapių pločio ir ilgio", subtitle = "Atsižvelgdami į rūšį gauname teisingą tendenciją")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point() + geom_smooth(method = "lm") + labs(title = "Koreliacija tarp taurėlapių pločio ir ilgio", subtitle = "Atsižvelgdami į rūšį gauname teisingą tendenciją")
iris %>%
group_by(Species) %>%
summarise(stuff = cor(.data$Sepal.Length, .data$Sepal.Width))
library(tidyverse)
iris %>%
group_by(Species) %>%
summarise(stuff = cor(.data$Sepal.Length, .data$Sepal.Width))
library(dplyr)
library(tidyr)
anscombe_tidy <- anscombe %>%
mutate(observation = seq_len(n())) %>%
pivot_longer(names_to = "key", values_to = "value", -observation) %>%
separate(key, c("variable", "set"), 1, convert = TRUE) %>%
mutate(set = c("I", "II", "III", "IV")[set]) %>%
pivot_wider(names_from = "variable", values_from = "value")
ggplot(anscombe_tidy, aes(x, y)) +
geom_point() +
facet_wrap(~ set) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Anscombe’s kvartetas", subtitle = "Visi 4 grafikai turi vienodus vidurkius, variaciją bei tiesinės regresijos tieses")
cor.test(penguins$flipper_length_mm, penguins$body_mass_g, method = "spearman")
library(palmerpenguins)
cor.test(penguins$flipper_length_mm, penguins$body_mass_g, method = "spearman")
ggplot(data = penguins, aes(x = flipper_length_mm)) + geom_histogram() + facet_grid(~sex)
library(palmerpenguins)
t.test(penguins$bill_length_mm, penguins$bill_depth_mm, paired = TRUE) # Built-in paired t-test
library(palmerpenguins)
ggplot(data = penguins, aes(x = bill_length_mm-bill_depth_mm)) + geom_histogram()
library(ggplot2)
ggplot(data = penguins, aes(x = bill_length_mm-bill_depth_mm)) + geom_histogram()
library(patchwork)
p1 <- ggplot() + aes(sample = residuals(my.anova)) + stat_qq() + stat_qq_line(color = "red")
p2 <- ggplot() + aes(x = residuals(my.anova)) + geom_density()
p1 + p2
library(palmerpenguins)
my.anova <- aov(data = penguins, body_mass_g ~ species)
summary(my.anova)
predict(my.anova)
penguins %>%
transmute(body_mass_g,
residuals = residuals(my.anova),
predicted = predict(my.anova)) %>% View()
library(dplyr)
penguins %>%
transmute(body_mass_g,
residuals = residuals(my.anova),
predicted = predict(my.anova)) %>% View()
residuals(my.anova)
penguins %>%
transmute(body_mass_g,
residuals = residuals(my.anova),
predicted = predict(my.anova))
penguins %>%
filter(!is.na(body_mass_g))
transmute(body_mass_g,
residuals = residuals(my.anova),
predicted = predict(my.anova))
penguins %>%
filter(!is.na(body_mass_g)) %>%
transmute(body_mass_g,
residuals = residuals(my.anova),
predicted = predict(my.anova))
dunnTest(body_mass_g ~ species, data=penguins, method="bh")
library(FSA)
install.packages("FSA")
library(FSA)
dunnTest(body_mass_g ~ species, data=penguins, method="bh")
my.lm.3 <- lm(data = penguins, body_mass_g ~ species*sex)
summary(my.lm.3)
leveneTest(my.lm.3)
residuals(my.lm.3)
ggplot(penguins, aes(x = species, y = body_mass_g, fill = sex)) + geom_boxplot() + labs(x = "Rūšis", y = "Kūno masė, g")
leveneTest(my.lm.3)
