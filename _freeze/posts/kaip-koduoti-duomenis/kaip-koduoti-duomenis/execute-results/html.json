{
  "hash": "cc3e1743a9c0714b92459e3638fb5e51",
  "result": {
    "markdown": "---\ntitle: \"Kaip koduoti duomenis?\"\n---\n\n\nDažnas sulaukiu klausimo, kaip saugoti ir koduoti duomenis. Jeigu dirbate su SPSS, tai nėra problema - SPSS leidžia perkoduoti kintamuosius, jog duomenys liktų nepakoreguoti, bet grafikuose ar lentelėse būtų pavaizduoti teisingai. Bet ką daryti, jeigu dirbame su R?\n\n# Kaip perkoduoti stulpelių pavadinimus?\n\nNesvarbu, kur dirbate, geriausia stulpelių pavadinimus saugoti taip:\n\n* Kiekvienas stulpelis turi turėti pavadinimą\n* Žodžiai pavadinime turi būti atskirti nuosekliai (stulpelio_pavadinimas, StulpelioPavadinimas, stulpelio.pavadinimas ir pan.)\n* Stulpelių pavadinimuose vengti lietuviškų rašmenų, skliaustų bei kablelių.\n\nKai dirbu su duomenimis, praktiškai visada gautus duomenis konvertuoju su `clean_names` funkcija iš `janitor` paketo.\n\n::: panel-tabset \n\n### 💩 Prieš:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n### 😍 Po `clean_names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(janitor::clean_names(iris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n:::\n\nStulpelių pavadinimų standartizavimas padeda greičiau dirbti, bet tai neišsprendžia problemos, jog lentelės ir grafikai su tokiais pavadinimais nėra tinkami publikavimui:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](kaip-koduoti-duomenis_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nMano mėgstamiausias būdas pervadinti pavadinimus yra su žodynu kiekvienam stulpelio pavadinimui:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_labels <- list(Sepal.Length = \"Taurėlapio ilgis, cm\",\n                    Sepal.Width = \"Taurėlapio plotis, cm\",\n                    Petal.Length = \"Vainiklapio ilgis, cm\",\n                    Petal.Width = \"Vainiklapio plotis, cm\",\n                    Species = \"Iriso rūšis\")\n```\n:::\n\n\nSąrašą galima pernaudoti ir grafikuose, ir lentelėse. Su `ggplot2` sąrašą galima panaudoti taip:\n\n::: panel-tabset \n\n### Prieš:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](kaip-koduoti-duomenis_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Po:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length)) + geom_boxplot() +\n  labs(x = iris_labels$Species,\n       y = iris_labels$Sepal.Length)\n```\n\n::: {.cell-output-display}\n![](kaip-koduoti-duomenis_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n\n\n\n",
    "supporting": [
      "kaip-koduoti-duomenis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}